class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if s == '':
            return 0
        start = 0
        end = 1
        Map = [s[0]]
        position = [0]
        length = 1
        while(end != len(s)):
            [find, index] = find_same(Map, s[end])
            if find == 1 and position[index] >= start:
                start = position[index] + 1
                length = max(end - start + 1, length)

                position[index] = end
            else:
                if find != 1:
                    Map = add_colum(Map, s[end])
                    position = add_colum(position, end)
                else:
                    position[index] = end
                length = max(end - start + 1, length)
            end = end + 1
        return  length

def find_same(s, a):
    for i in range(0, len(s)):
        if s[i] == a:
            return  1, i
    return 0, i

def add_colum(array,x):
    array1 = [0]* (len(array)+1)
    for i in range(0, len(array)):
        array1[i] = array[i]
    array1[i+1]=x
    return array1

string = "aabaab!bb"


self = 0
length1=Solution.lengthOfLongestSubstring(self, string)
print(length1)
